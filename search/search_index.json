{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nimba framework warning This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Everything you need to know about Nimba Framework Nimba Framework is a modern, fast (coding), web framework with Python 3.6+. The key features are: Fast to code : Increase the speed to develop features. * Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs. Installation $ pip install nimba Create Application $ nimba create --app awesome_app Structure project app - Your app project, you will spend most of your time here. views.py - Your logic code models.py - Define here the schema of your database tests.py - Write your test here staticfiles - The static files. templates - Your template (html page etc...). settings.py - Settings database, secret key and other. mask.py - the command utility, start the server, create views and many more. Run server In your project app awesome_app $ python mask.py serve Monitoring for changes... Starting server in PID 72932 June 25, 2021 - 18:04:32 Serving on http://127.0.0.1:8000 Quit the server with CONTROL-C. Open http://127.0.0.1:8000 in your navigator Continue directly with tutorial Licence This project is licensed under the terms of Nimba solution compagny.","title":"Nimba Framework"},{"location":"#nimba-framework","text":"warning This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Everything you need to know about Nimba Framework Nimba Framework is a modern, fast (coding), web framework with Python 3.6+. The key features are: Fast to code : Increase the speed to develop features. * Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.","title":"Nimba framework"},{"location":"#installation","text":"$ pip install nimba","title":"Installation"},{"location":"#create-application","text":"$ nimba create --app awesome_app","title":"Create Application"},{"location":"#structure-project","text":"app - Your app project, you will spend most of your time here. views.py - Your logic code models.py - Define here the schema of your database tests.py - Write your test here staticfiles - The static files. templates - Your template (html page etc...). settings.py - Settings database, secret key and other. mask.py - the command utility, start the server, create views and many more.","title":"Structure project"},{"location":"#run-server","text":"In your project app awesome_app $ python mask.py serve Monitoring for changes... Starting server in PID 72932 June 25, 2021 - 18:04:32 Serving on http://127.0.0.1:8000 Quit the server with CONTROL-C. Open http://127.0.0.1:8000 in your navigator Continue directly with tutorial","title":"Run server"},{"location":"#licence","text":"This project is licensed under the terms of Nimba solution compagny.","title":"Licence"},{"location":"contributing/","text":"Development - Contributing","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"","title":"Development - Contributing"},{"location":"features/","text":"Features Comming soom...","title":"Features"},{"location":"features/#features","text":"Comming soom...","title":"Features"},{"location":"release-notes/","text":"Reloase notes","title":"Reloase notes"},{"location":"release-notes/#reloase-notes","text":"","title":"Reloase notes"},{"location":"tutorial/","text":"Parite 1 - Setup Warning : This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Make sure you have python3.6 +. Let's start by creating a virtual environment. $ python --version Install Nimba $ pip install nimba Create nimba application $ nimba create --app awesome_app Structure project app - Your app project, you will spend most of your time here. views.py - Your logic code models.py - Define here the schema of your database tests.py - Write your test here staticfiles - The static files. templates - Your template (html page etc...). settings.py - Settings database, secret key and other. mask.py - the command utility, start the server, create views and many more. Run server In your project app awesome_app $ python mask.py serve Monitoring for changes... Starting server in PID 72932 June 25, 2021 - 18:04:32 Serving on http://127.0.0.1:8000 Quit the server with CONTROL-C. Open http://127.0.0.1:8000 You cant change port with python mask.py serve -p 7000 (runing with port 7000) Or sharing ip python mask.py serve -s 0:7000 (0.0.0.0:7000) Create other view A view is a python function decorated with an url path, accepting a web request and returning a response. This response can contain html, template, xml etc. A simple view returning html code with a decorate path. Open your views.py in your app folder from nimba.http import router @router ( '/about' ) def about ( request ): return \"<h1> Hello, <h2> Welcom to my app page\" Each life is decorated by a road indicating a path from nimba.http import router @router('/about') the router decorator makes your function a view, it receives web requests. request is the request web content all data get and post Open http://127.0.0.1:8000/about Continue to the tutorial Partie 2 - Endpoint","title":"Parite 1 - Setup"},{"location":"tutorial/#parite-1-setup","text":"Warning : This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Make sure you have python3.6 +. Let's start by creating a virtual environment. $ python --version","title":"Parite 1 - Setup"},{"location":"tutorial/#install-nimba","text":"$ pip install nimba","title":"Install Nimba"},{"location":"tutorial/#create-nimba-application","text":"$ nimba create --app awesome_app","title":"Create nimba application"},{"location":"tutorial/#structure-project","text":"app - Your app project, you will spend most of your time here. views.py - Your logic code models.py - Define here the schema of your database tests.py - Write your test here staticfiles - The static files. templates - Your template (html page etc...). settings.py - Settings database, secret key and other. mask.py - the command utility, start the server, create views and many more.","title":"Structure project"},{"location":"tutorial/#run-server","text":"In your project app awesome_app $ python mask.py serve Monitoring for changes... Starting server in PID 72932 June 25, 2021 - 18:04:32 Serving on http://127.0.0.1:8000 Quit the server with CONTROL-C. Open http://127.0.0.1:8000 You cant change port with python mask.py serve -p 7000 (runing with port 7000) Or sharing ip python mask.py serve -s 0:7000 (0.0.0.0:7000)","title":"Run server"},{"location":"tutorial/#create-other-view","text":"A view is a python function decorated with an url path, accepting a web request and returning a response. This response can contain html, template, xml etc. A simple view returning html code with a decorate path. Open your views.py in your app folder from nimba.http import router @router ( '/about' ) def about ( request ): return \"<h1> Hello, <h2> Welcom to my app page\" Each life is decorated by a road indicating a path from nimba.http import router @router('/about') the router decorator makes your function a view, it receives web requests. request is the request web content all data get and post Open http://127.0.0.1:8000/about Continue to the tutorial Partie 2 - Endpoint","title":"Create other view"},{"location":"tutorial/css-style/","text":"Partie 4 - CSS and JavaScript","title":"Partie 4 - CSS and JavaScript"},{"location":"tutorial/css-style/#partie-4-css-and-javascript","text":"","title":"Partie 4 - CSS and JavaScript"},{"location":"tutorial/models/","text":"Partie 6 - Models comming...","title":"Partie 6 - Models"},{"location":"tutorial/models/#partie-6-models","text":"","title":"Partie 6 - Models"},{"location":"tutorial/models/#comming","text":"","title":"comming..."},{"location":"tutorial/path-params/","text":"Partie 2 - Endpoint Warning : This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Continue to the tutorial Partie 3 - Query parameters","title":"Partie 2 - Endpoint"},{"location":"tutorial/path-params/#partie-2-endpoint","text":"Warning : This project is private and is still in design, not ready for production. Create an issue if you encounter any bugs! Continue to the tutorial Partie 3 - Query parameters","title":"Partie 2 - Endpoint"},{"location":"tutorial/post-params/","text":"Partie 5 - POST data","title":"Partie 5 - POST data"},{"location":"tutorial/post-params/#partie-5-post-data","text":"","title":"Partie 5 - POST data"},{"location":"tutorial/query-params/","text":"Partie 3 - Query parameters","title":"Partie 3 - Query parameters"},{"location":"tutorial/query-params/#partie-3-query-parameters","text":"","title":"Partie 3 - Query parameters"}]}